<!-- Facebook Pixel Code -->
<script>
// Verifica se já existe um pixel inicializado
if (typeof fbq !== 'undefined') {
    console.warn('Meta Pixel já está inicializado');
} else {
    // Configurações do Pixel
    const PIXEL_ID = '1163339595278098';
    const APP_NAME = 'traq';

    // Funções auxiliares
    const helpers = {
        generateEventId: () => {
            const num1 = Math.floor(Math.random() * 10000000000000000);
            const num2 = Math.floor(Math.random() * 10000000000000000);
            return `${num1}.${num2}.${APP_NAME}`;
        },
        getLanguage: () => navigator.language || navigator.userLanguage || 'pt-BR',
        getReferrer: () => {
            const ref = document.referrer || 'Not Set';
            try {
                return ref !== 'Not Set' ? new URL(ref).hostname : ref;
            } catch {
                return ref;
            }
        },
        getCookie: (name) => {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        },
        generateUUID: () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
            const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        })
    };

    // Inicialização do Pixel
    !function(f,b,e,v,n,t,s) {
        if(f.fbq) return;
        n=f.fbq=function(){n.callMethod ?
        n.callMethod.apply(n,arguments) : n.queue.push(arguments)};
        if(!f._fbq) f._fbq = n;
        n.push=n;
        n.loaded = !0;
        n.version='2.0';
        n.queue = [];
        t=b.createElement(e); 
        t.async = !0;
        t.src = v;
        s=b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t,s)
    }(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');

    // Dados básicos para eventos
    const getBaseEventData = () => {
        const userId = helpers.getCookie('userId') || helpers.generateUUID();
        const _fbp = helpers.getCookie('_fbp');
        
        return {
            app: APP_NAME,
            event_time: Math.floor(Date.now() / 1000),
            language: helpers.getLanguage(),
            referrer: helpers.getReferrer(),
            external_id: userId,
            fbp: _fbp,
            client_user_agent: navigator.userAgent
        };
    };

    // Função para envio de eventos
    async function sendEvent(eventType, data = {}) {
        const eventId = helpers.generateEventId();
        const baseData = getBaseEventData();

        try {
            const eventData = {
                ...baseData,
                ...data
            };

            // Envia o evento para o Facebook
            fbq('track', eventType, eventData, { eventID: eventId });

            // Envia para nossa API
            await fetch('https://api-traqueamento.onrender.com/events/send', {
                method: 'POST',
                credentials: 'include',
                headers: { 
                    'Content-Type': 'application/json',
                    'X-Event-ID': eventId
                },
                body: JSON.stringify({
                    ...eventData,
                    eventType
                })
            });

        } catch (error) {
            console.error(`Erro ao rastrear evento ${eventType}:`, error);
        }
    }

    // Inicialização do pixel
    const initData = getBaseEventData();
    fbq('init', PIXEL_ID, initData);

    // PageView imediato
    fbq('track', 'PageView', initData);

    // Eventos específicos da Yampi
    document.addEventListener('DOMContentLoaded', function() {
        // ViewHome event
        if (window.location.pathname === '/') {
            sendEvent('ViewHome', {
                content_type: 'homepage',
                content_name: 'Homepage'
            });
        }

        // ViewCart event
        if (window.location.pathname.includes('/carrinho')) {
            const cartTotal = document.querySelector('[data-cart-total]')?.textContent;
            const cartItems = document.querySelectorAll('[data-cart-item]');
            
            sendEvent('ViewCart', {
                content_type: 'cart',
                value: cartTotal ? parseFloat(cartTotal.replace(/[^\d,]/g, '').replace(',', '.')) : 0,
                currency: 'BRL',
                num_items: cartItems.length,
                content_ids: Array.from(cartItems).map(item => item.getAttribute('data-product-id'))
            });
        }

        // ViewContent event (produto)
        if (window.location.pathname.includes('/produto/')) {
            const productName = document.querySelector('[data-product-name]')?.textContent;
            const productId = document.querySelector('[data-product-id]')?.getAttribute('data-product-id');
            const productPrice = document.querySelector('[data-product-price]')?.textContent;
            
            sendEvent('ViewContent', {
                content_type: 'product',
                content_name: productName,
                content_ids: [productId],
                value: productPrice ? parseFloat(productPrice.replace(/[^\d,]/g, '').replace(',', '.')) : 0,
                currency: 'BRL'
            });
        }

        // ViewItemList event (lista de produtos)
        if (window.location.pathname.includes('/produtos') || window.location.pathname.includes('/categoria/')) {
            const productList = document.querySelectorAll('[data-product-item]');
            const categoryName = document.querySelector('[data-category-name]')?.textContent;
            
            if (productList.length > 0) {
                sendEvent('ViewItemList', {
                    content_type: 'product_group',
                    content_name: categoryName || 'Lista de Produtos',
                    content_ids: Array.from(productList).map(item => item.getAttribute('data-product-id')),
                    num_items: productList.length,
                    content_category: categoryName || 'Produtos'
                });
            }
        }

        // ViewCategory event
        if (window.location.pathname.includes('/categoria/')) {
            const categoryName = document.querySelector('[data-category-name]')?.textContent;
            const categoryId = document.querySelector('[data-category-id]')?.getAttribute('data-category-id');
            
            if (categoryName) {
                sendEvent('ViewCategory', {
                    content_type: 'product_group',
                    content_name: categoryName,
                    content_ids: [categoryId],
                    content_category: categoryName
                });
            }
        }

        // ViewSearchResults event
        if (window.location.pathname.includes('/busca')) {
            const searchTerm = new URLSearchParams(window.location.search).get('q');
            const searchResults = document.querySelectorAll('[data-search-result]');
            
            if (searchTerm && searchResults.length > 0) {
                sendEvent('ViewSearchResults', {
                    search_string: searchTerm,
                    content_type: 'product_group',
                    content_ids: Array.from(searchResults).map(result => result.getAttribute('data-product-id')),
                    num_items: searchResults.length
                });
            }
        }

        // AddToCart event
        document.addEventListener('addToCart', function(e) {
            const { productId, productName, price, quantity } = e.detail;
            
            sendEvent('AddToCart', {
                content_type: 'product',
                content_ids: [productId],
                content_name: productName,
                value: parseFloat(price.replace(/[^\d,]/g, '').replace(',', '.')),
                currency: 'BRL',
                num_items: quantity
            });
        });

        // Checkout events
        if (window.location.pathname.includes('/checkout')) {
            // InitiateCheckout
            sendEvent('InitiateCheckout', {
                content_type: 'product',
                value: parseFloat(document.querySelector('[data-cart-total]')?.textContent.replace(/[^\d,]/g, '').replace(',', '.') || '0'),
                currency: 'BRL',
                num_items: document.querySelectorAll('[data-cart-item]').length,
                content_ids: Array.from(document.querySelectorAll('[data-cart-item]')).map(item => item.getAttribute('data-product-id'))
            });

            // StartCheckout (quando começa a preencher o formulário)
            const checkoutForm = document.querySelector('form[data-checkout-form]');
            if (checkoutForm) {
                checkoutForm.addEventListener('focus', function() {
                    sendEvent('StartCheckout');
                }, { once: true });
            }

            // RegisterDone (quando termina o formulário)
            if (checkoutForm) {
                checkoutForm.addEventListener('submit', function() {
                    sendEvent('RegisterDone');
                });
            }

            // AddShippingInfo
            const shippingForm = document.querySelector('form[data-shipping-form]');
            if (shippingForm) {
                shippingForm.addEventListener('change', function() {
                    sendEvent('AddShippingInfo');
                });
            }

            // AddPaymentInfo
            const paymentForm = document.querySelector('form[data-payment-form]');
            if (paymentForm) {
                paymentForm.addEventListener('change', function() {
                    sendEvent('AddPaymentInfo');
                });
            }

            // AddCoupon
            const couponForm = document.querySelector('form[data-coupon-form]');
            if (couponForm) {
                couponForm.addEventListener('submit', function() {
                    sendEvent('AddCoupon');
                });
            }
        }

        // Purchase event
        if (window.location.pathname.includes('/pedido-confirmado')) {
            const orderTotal = document.querySelector('[data-order-total]')?.textContent;
            const orderItems = document.querySelectorAll('[data-order-item]');
            const paymentMethod = document.querySelector('[data-payment-method]')?.textContent;
            
            const eventData = {
                content_type: 'product',
                value: orderTotal ? parseFloat(orderTotal.replace(/[^\d,]/g, '').replace(',', '.')) : 0,
                currency: 'BRL',
                num_items: orderItems.length,
                content_ids: Array.from(orderItems).map(item => item.getAttribute('data-product-id')),
                payment_method: paymentMethod
            };

            // Determina o tipo específico de Purchase baseado no método de pagamento
            let purchaseEvent = 'Purchase';
            if (paymentMethod) {
                switch(paymentMethod.toLowerCase()) {
                    case 'pix':
                        purchaseEvent = 'Purchase - pix';
                        break;
                    case 'cartão de crédito':
                        purchaseEvent = 'Purchase - credit_card';
                        break;
                    case 'boleto':
                        purchaseEvent = 'Purchase - billet';
                        break;
                }
            }

            // Verifica se é um pedido de alto valor
            const totalValue = parseFloat(orderTotal.replace(/[^\d,]/g, '').replace(',', '.') || '0');
            if (totalValue >= 5000) { // Ajuste este valor conforme necessário
                purchaseEvent = 'Purchase - high_ticket';
            }

            sendEvent(purchaseEvent, eventData);
        }

        // Search event
        const searchForm = document.querySelector('form[data-search-form]');
        if (searchForm) {
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const searchTerm = this.querySelector('input[type="search"]').value;
                const searchResults = document.querySelectorAll('[data-search-result]');
                
                sendEvent('Search', {
                    search_string: searchTerm,
                    content_ids: Array.from(searchResults).map(result => result.getAttribute('data-product-id'))
                });
            });
        }
    });
}
</script>
<noscript>
  <img height="1" width="1" style="display:none"
    src="https://www.facebook.com/tr?id=1163339595278098&ev=PageView&noscript=1"/>
</noscript>
<!-- End Facebook Pixel Code --> 